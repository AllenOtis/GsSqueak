#!/bin/bash

set -o pipefail

restore=false
restoreFast=false

# Set colors
YELLOW='\033[1;33m'
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

createGsSqueakStone_usage() {
  echo "$0 [-f <from_stage_number>] [-t <till_stage_number>] <stone_name>"
  echo "Press ctrl-c to debug a package"
}

# functions
load_package() {
  load_package_usage() { echo "load_package [-S] [-D] <package_name>"; exit; }

  local OPTIND package_name opt SQUEAK_IMPORT DEBUG

  while getopts "SD" opt; do
    case "${opt}" in
      S)
        SQUEAK_IMPORT=-S
        ;;
      D)
        DEBUG=-D
        ;;
      *)
        load_package_usage
        exit 1
        ;;
    esac
  done
  shift $((OPTIND-1))

  PACKAGE_NAME="$1"
  PACKAGE_PATH="$2"

  # if package is marked to be debugged by auto debug, set debug option for this package to true
  if [[ $DEBUG_PACKAGE = $PACKAGE_NAME ]]; then
    DEBUG=-D
  fi

  if [[ $DEBUG = -D ]]; then
    echo -en "[ ${YELLOW}DEBUG${NC} ] Load $PACKAGE_NAME"
  else
    echo -en "[ ${YELLOW}PENDING${NC} ] Load $PACKAGE_NAME "
  fi

  loadPackage $SQUEAK_IMPORT $DEBUG "$PACKAGE_NAME" "$PACKAGE_PATH"

  if [ $? = 0 ]; then
    echo -e "\r[ ${GREEN}SUCCESS${NC} ] Load $PACKAGE_NAME"

    if [[ $DEBUG = -D ]]; then
      echo -e "[ ${GREEN}SUCCESS${NC} ] Exit after debugging package"
      exit 0
    fi
  else
    echo -e "\r[ ${RED}ERRORED${NC} ] Load $PACKAGE_NAME"

    if [ $AUTO_DEBUG = true ]; then
      echo -e "[ ${GREEN}SUCCESS${NC} ] Restart from STAGE $CURRENT_STAGE and load package $PACKAGE_NAME in debug mode"
      AUTO_DEBUG=false DEBUG_PACKAGE="${PACKAGE_NAME}" createGsSqueakStone -f $CURRENT_STAGE -A $name

      exit $?
    else
      echo -e "\r[ ${RED}ERRORED${NC} ] Abort because auto-debug is disabled"
      exit 1
    fi
  fi

}

run_topaz() {
  NAME=$1
  echo -en "[ ${YELLOW}PENDING${NC} ] Run topaz code"
startTopaz $NAME -l >/dev/null 2>&1 << EOF
`cat`
EOF

  if ! [[ $? = 0 ]]; then
    echo -e "\r[ ${RED}ERRORED${NC} ] Run topaz code"
    exit 1
  fi

  echo -e "\r[ ${GREEN}SUCCESS${NC} ] Run topaz code"
}

restore_backup() {
  restore_backup_usage() { echo "restore_backup <stone_name> <file_name>"; exit; }

  : "${1:?Need to set STONE_NAME non-empty}"
  : "${2:?Need to set FILE_NAME non-empty}"

  STONE_NAME=$1
  FILE_NAME=$2

  echo -en "[ ${YELLOW}PENDING${NC} ] Restore backup $FILE_NAME"
  todeRestore $STONE_NAME $FILE_NAME >/dev/null 2>&1

  if [[ $? = 0 ]]; then
    echo -e "\r[ ${GREEN}SUCCESS${NC} ] Restore backup $FILE_NAME"
  else
    echo -e "\r[ ${RED}ERRORED${NC} ] Restore backup $FILE_NAME"
    exit 1
  fi
}

# Available stages are
# 0 - Import from scratch by creating a stone
# 1 -
# 2 -
# 3 -
# 4 -
# 5 -
# 6 -
FROM_STAGE=0
TILL_STAGE=10 # equals numeber of current stages
CURRENT_STAGE=0
AUTO_DEBUG=true

while getopts f:t:A opt; do
	case $opt in
    f)
      echo "Starting from stage $OPTARG"
      FROM_STAGE=$OPTARG
      ;;
    t)
      echo "Importing till stage $OPTARG"
      TILL_STAGE=$OPTARG
      ;;
    A)
      # disable auto debug
      AUTO_DEBUG=false
      ;;
    /?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
	esac
done


# basic error handling of stages
if [ \( $FROM_STAGE -gt 10 \) -o \( $FROM_STAGE -lt 0 \) ]; then
  echo "Invalid FROM stage ${FROM_STAGE}. Please select a stage between 0 and 10"
  exit 1
fi

if [ \( $TILL_STAGE -gt 10 \) -o \( $TILL_STAGE -lt 0 \) ]; then
  echo "Invalid TILL stage ${TILL_STAGE}. Please select a stage between 0 and 10"
  exit 1
fi

if [ $FROM_STAGE -gt $TILL_STAGE ]; then
  echo "Invalid configuration. You have to specify a FROM stage greater than your TILL stage."
  exit 1
fi


# Get name of the stone
shift $((OPTIND-1))
name=$1;
export name


pushd "${GS_HOME}/server/stones/${name}" > /dev/null
find . -name '*.conf' | xargs sed -i 's/GEM_TEMPOBJ_CACHE_SIZE = 50000;/GEM_TEMPOBJ_CACHE_SIZE = 500000;/g'
find . -name '*.conf' | xargs sed -i 's/SHR_PAGE_CACHE_SIZE_KB = 500000;/SHR_PAGE_CACHE_SIZE_KB = 5000000;/g'
popd > /dev/null


if [ $FROM_STAGE -le 1 ]; then
  # start import from scratch by creating a stone
  if [ $FROM_STAGE = 0 ]; then
    echo -en "[ ${YELLOW}PENDING${NC} ] Create stone $name"
    createStone -f $name 3.5.0 >/dev/null 2>&1 # creates a backup called tode.bdf

    if [[ $? = 0 ]]; then
      echo -e "\r[ ${GREEN}SUCCESS${NC} ] Create stone $name"
    else
      echo -e "\r[ ${RED}ERRORED${NC} ] Create stone $name"
      exit 1
    fi
    echo -e "[ ${GREEN}SUCCESS${NC} ] STAGE 0"

    if [ $TILL_STAGE = 0 ]; then
      echo "Exit script after stage 0 because of configuration"
      exit 0
    fi
  # load backup created by tode in order to skip stone creation
  elif [ $FROM_STAGE = 1 ]; then
    restore_backup $name tode.dbf
  fi

  CURRENT_STAGE=1

run_topaz $name << EOF
set u SystemUser p swordfish
login
run
SystemObjectSecurityPolicy worldAuthorization: #write.
(AllUsers userWithId: 'DataCurator') addPrivilege: #'CompilePrimitives'.
%
run
GsCompilerClasses keysAndValuesDo: [:symbol : class | Globals at: symbol put: class ]
%
commit
logout
login

input $GS_HOME/server/stones/$name/product/upgrade/GsNMethodIr.gs

commit
logout
set u DataCurator p swordfish
login
method: Behavior
_clearSubclassesDisallowed
    self _unsafeAt: 2 put: (format bitAnd: (16r20 bitInvert))
%
send Behavior _clearSubclassesDisallowed
send LargeInteger _clearSubclassesDisallowed

env 7
method: Class
name
    ^ self @env0: name
%

commit
logout
exit
EOF

load_package BPBugFixes "bug-fixes"
load_package MCEnvSwitch "monticello-environment-switch"
load_package SqueakParser "squeak-parser"
load_package SqSuperclasses "squeak-modifications/pre-squeak-import"
load_package SqueakEnvironments "squeak-environments"
load_package Context0 "squeak-modifications/pre-squeak-import"
load_package Workspace "squeak-modifications/pre-squeak-import"
load_package Env0Extensions "squeak-modifications/pre-squeak-import"

# create backup for that stage
todeBackup $name stage-1.dbf >/dev/null 2>&1

  echo -e "[ ${GREEN}SUCCESS${NC} ] STAGE 1"

  if [ $TILL_STAGE = 1 ]; then
    echo "Exit script after stage $TILL_STAGE because of configuration"
    exit 0
  fi
fi


if [ $FROM_STAGE -le 2 ]; then
  CURRENT_STAGE=2
  if [ $FROM_STAGE = 2 ]; then
    restore_backup $name stage-1.dbf
  fi

run_topaz $name << EOF
login
run
MCEnv set: 7.
MCEnv useSqueakParser.
Environment initialize.
Object addClassVarName: 'DependentsFields'.
%
commit
logout
exit
EOF

load_package EnvironmentsEnv7 "squeak-environments"
load_package -S Context
load_package -S SqBooleans
load_package -S SqClasses
run_topaz $name << EOF
login
run
(SqueakEnvironment at: #ProtoObject) _setSelfCanBeSpecial recompileAllMethodsUsingSqueakParserInEnv: 7.
%
commit
logout
exit
EOF

load_package -S SqExceptions
load_package -S SqNumbers
run_topaz $name << EOF
login
run
(SqueakEnvironment at: #Magnitude) _setSelfCanBeSpecial recompileAllMethodsUsingSqueakParserInEnv: 7.
(SqueakEnvironment at: #Number) _setSelfCanBeSpecial recompileAllMethodsUsingSqueakParserInEnv: 7.
(SqueakEnvironment at: #Integer) _setSelfCanBeSpecial recompileAllMethodsUsingSqueakParserInEnv: 7.
(SqueakEnvironment at: #ScaledDecimal) _setSelfCanBeSpecial recompileAllMethodsUsingSqueakParserInEnv: 7.
(SqueakEnvironment at: #Fraction) _setSelfCanBeSpecial recompileAllMethodsUsingSqueakParserInEnv: 7.
MCEnv useGemstoneParser.
%
commit
logout
exit
EOF

load_package -S SqBlock
load_package -S SqBlock

run_topaz $name << EOF
login
run
MCEnv useSqueakParser.
%
commit
logout
exit
EOF

load_package -S SqKernel
load_package -S SqCharacter

run_topaz $name << EOF
login
run
SmalltalkImage newMethodFromSqueakString: 'addToStartUpList: anObject' inEnv: 7.
SmalltalkImage newMethodFromSqueakString: 'addToStartUpList: aClass after: predecessor' inEnv: 7.
SmalltalkImage newMethodFromSqueakString: 'addToStartUpList: aClass before: predecessor' inEnv: 7.
SmalltalkImage newMethodFromSqueakString: 'addToShutDownList: anObject' inEnv: 7.
SmalltalkImage newMethodFromSqueakString: 'addToShutDownList: aClass after: predecessor' inEnv: 7.
SmalltalkImage newMethodFromSqueakString: 'addToShutDownList: aClass before: predecessor' inEnv: 7.
SmalltalkImage newMethodFromSqueakString: 'removeFromStartUpList: anObject' inEnv: 7.
SmalltalkImage newMethodFromSqueakString: 'removeFromShutDownList: anObject' inEnv: 7.

UserGlobals at: #ByteString put: String.
UserGlobals at: #ByteSymbol put: Symbol.
UserGlobals at: #MethodDictionary put: GsMethodDictionary.
UserGlobals at: #CompiledMethod put: GsNMethod.
%
commit
logout
exit
EOF

todeBackup $name stage-2.dbf >/dev/null 2>&1

  echo -e "[ ${GREEN}SUCCESS${NC} ] STAGE 2"

  if [ $TILL_STAGE = 2 ]; then
    echo "Exit script after stage $TILL_STAGE because of configuration"
    exit 0
  fi

fi

if [ $FROM_STAGE -le 3 ]; then
  CURRENT_STAGE=3
  if [ $FROM_STAGE = 3 ]; then
    restore_backup $name stage-2.dbf
  fi

  load_package -S '`Collections-Abstract`'
  load_package -S '`Collections-Support`'
  load_package -S '`SqCollectionLiterals`'
  load_package -S '`SqCollections`'
  load_package -S '`Collections-Sequenceable`'
  load_package -S '`Collections-Heap`'
  load_package -S '`Collections-Arrayed`'
  load_package -S '`Graphics-Primitives`'
  load_package -S '`Graphics-converting`'

  todeBackup $name stage-3.dbf >/dev/null 2>&1

  echo -e "[ ${GREEN}SUCCESS${NC} ] STAGE 3"

  if [ $TILL_STAGE = 3 ]; then
    echo "Exit script after stage $TILL_STAGE because of configuration"
    exit 0
  fi
fi

if [ $FROM_STAGE -le 4 ]; then
  CURRENT_STAGE=4
  if [ $FROM_STAGE = 4 ]; then
    restore_backup $name stage-3.dbf
  fi

run_topaz $name -l << EOF
login
run
| dict varAndValue |
dict := SymbolDictionary new.

dict at: #DefaultTab put: nil.

varAndValue := #(
		CtrlDigits 			(159 144 143 128 127 129 131 180 149 135)
		CtrlOpenBrackets	(201 7 218 249 219 15)
			"lparen gottn by ctrl-:= = 201; should be 213 but can't type that on Mac"

			"values for alignment"
		LeftFlush	0
		RightFlush	1
		Centered	2
		Justified	3

			"subscripts for a marginTabsArray tuple"
		LeftMarginTab	1
		RightMarginTab	2

			"font faces"
		Basal	0
		Bold	1
		Italic	2

			"in case font doesn't have a width for space character"
			"some plausible numbers-- are they the right ones?"
		DefaultSpace			4
		DefaultTab				24
		DefaultLineGrid			16
		DefaultBaseline			12
		DefaultFontFamilySize	3	"basal, bold, italic"
	).

	varAndValue size odd ifTrue: [self error: 'unpaired text constant'].
	(2 to: varAndValue size by: 2) do:
		[:i | dict at: (varAndValue at: i - 1) put: nil].

dict at: #DefaultTextStyle put: nil.
dict at: #DefaultTabsArray put: #(24 48 72 96 120 144 168 192 216 240 264 288 312 336 360 384 408 432 456 480 504 528 552 576 600 624 648 672 696 720).
dict at: #DefaultMarginTabsArray put: #(#(24 24) #(48 48) #(72 72) #(96 96) #(120 120) #(144 144) #(168 168) #(192 192) #(216 216) #(240 240) #(264 264) #(288 288) #(312 312) #(336 336) #(360 360)).

SqueakEnvironment at: #TextConstants put: dict
%
commit
logout
exit
EOF

  load_package -S '`Collections-Text`'

  load_package -S '`CompiledMethod`'
  load_package -S '`SqWeak`'
  load_package -S '`System-Object Events`'
  load_package -S '`System-Change Notification`'
  load_package -S '`Kernel-Models`'
  load_package -S '`System-FileRegistry`'
  load_package -S '`System-Applications`'

  load_package -S '`System-Support`'
  load_package -S '`SUnit`'
  load_package -S '`SqCompiler`'

  load_package -S '`System-Preferences`'
  load_package -S '`Kernel-Pools`'


  todeBackup $name stage-4.dbf >/dev/null 2>&1

  echo -e "[ ${GREEN}SUCCESS${NC} ] STAGE 4"

  if [ $TILL_STAGE = 4 ]; then
    echo "Exit script after stage $TILL_STAGE because of configuration"
    exit 0
  fi
fi

if [ $FROM_STAGE -le 5 ]; then
  CURRENT_STAGE=5
  if [ $FROM_STAGE = 5 ]; then
    restore_backup $name stage-4.dbf
  fi

  load_package -S '`Kernel-Processes`'
  load_package -S '`Kernel-Numbers`'

  load_package -S '`MockClasses`'
  load_package -S '`Chronology-Core`'

  load_package -S '`Multilingual-TextConversion`'
  load_package -S '`Multilingual-Encodings`'

  load_package -S '`Balloon`'

  echo -e "[ ${GREEN}SUCCESS${NC} ] STAGE 5"
  todeBackup $name stage-5.dbf >/dev/null 2>&1

  if [ $TILL_STAGE = 5 ]; then
    echo "Exit script after stage $TILL_STAGE because of configuration"
    exit 0
  fi
fi

if [ $FROM_STAGE -le 6 ]; then
  CURRENT_STAGE=6
  if [ $FROM_STAGE = 6 ]; then
    restore_backup $name stage-5.dbf
  fi

  load_package -S '`GraphicsLibrary`'
  load_package -S '`VMMaker`'
  load_package -S '`Graphics-Display Objects`'

  load_package -S '`SqKernelTestsNumbers`'
  load_package -S '`KernelTests-Objects`'
  load_package -S '`CollectionsTests-Text`'

  load_package -S '`System-Recovery`'

  echo -e "[ ${GREEN}SUCCESS${NC} ] STAGE 6"
  todeBackup $name stage-6.dbf >/dev/null 2>&1

  if [ $TILL_STAGE = 6 ]; then
    echo "Exit script after stage $TILL_STAGE because of configuration"
    exit 0
  fi
fi

if [ $FROM_STAGE -le 7 ]; then
  CURRENT_STAGE=7
  if [ $FROM_STAGE = 7 ]; then
    restore_backup $name stage-6.dbf
  fi

  load_package -S '`System-Object Storage`'
  load_package -S '`Collections-Streams`'
  load_package -S '`Collections-Unordered`'
  load_package -S '`Files`'
  load_package -S '`Tools-FileList`'
  load_package -S '`Compression`'

  load_package -S '`Graphics-Text`'
  load_package -S '`Graphics-SegmentScanner`'
  load_package -S '`Graphics-Files`'
  load_package -S '`Graphics-Fonts`'

  echo -e "[ ${GREEN}SUCCESS${NC} ] STAGE 7"
  todeBackup $name stage-7.dbf >/dev/null 2>&1

  if [ $TILL_STAGE = 7 ]; then
    echo "Exit script after stage $TILL_STAGE because of configuration"
    exit 0
  fi
fi

if [ $FROM_STAGE -le 8 ]; then
  CURRENT_STAGE=8
  if [ $FROM_STAGE = 8 ]; then
    restore_backup $name stage-7.dbf
  fi

  load_package -S '`ST80-Paths`'
  load_package -S '`STON`'

echo "
login
run
Workspace evaluate: '
    | textStyle |
    textStyle := TextStyle new.
    textStyle newFontArray: { StrikeFont createDejaVu: 14 }.
    TextConstants at: #DefaultTextStyle put: textStyle
'
%
commit
logout
exit
" | startTopaz $name -l > /dev/null

  load_package -S '`System-Localization`'
  load_package -S '`Tools-Base`'
  load_package -S '`Tools-Menus`'
  load_package -S '`Tools-Inspector`'
  load_package -S '`Tools-Debugger`'
  load_package -S '`TrueType`'

  echo -e "[ ${GREEN}SUCCESS${NC} ] STAGE 8"
  todeBackup $name stage-8.dbf >/dev/null 2>&1

  if [ $TILL_STAGE = 8 ]; then
    echo "Exit script after stage $TILL_STAGE because of configuration"
    exit 0
  fi
fi

if [ $FROM_STAGE -le 9 ]; then
  CURRENT_STAGE=9
  if [ $FROM_STAGE = 9 ]; then
    restore_backup $name stage-8.dbf
  fi

  load_package -S '`Tools-yellow button menu`'
  load_package -S '`System-Themes`'
  load_package -S '`Collections-Cache`'
  load_package -S '`Sound`'
  load_package -S '`Network`'
  load_package -S '`System-Download`'
  load_package -S '`Graphics-Transformations`'

  load_package -S '`TheWorldMenu`'
  load_package -S '`Tools-Browser`'
  load_package -S '`Morphic`'
  load_package -S '`Tools-Late`'
  load_package -S '`System-Changes`'
  load_package -S '`Multilingual-Languages`'
  load_package -S '`ToolBuilder`'

  echo -e "[ ${GREEN}SUCCESS${NC} ] STAGE 9"
  todeBackup $name stage-9.dbf >/dev/null 2>&1

  if [ $TILL_STAGE = 9 ]; then
    echo "Exit script after stage $TILL_STAGE because of configuration"
    exit 0
  fi
fi

if [ $FROM_STAGE -le 10 ]; then
  CURRENT_STAGE=10
  if [ $FROM_STAGE = 10 ]; then
    restore_backup $name stage-9.dbf
  fi

run_topaz $name << EOF
login
run
(SqueakEnvironment at: #SystemOrganization put: ((SqueakEnvironment at: #SystemOrganizer) @env7: defaultList: SqueakEnvironment allClasses))
%
commit
logout
exit
EOF

  todeBackup $name full.dbf >/dev/null 2>&1

  echo -e "[ ${GREEN}SUCCESS${NC} ] STAGE 10"

  if [ $TILL_STAGE = 10 ]; then
  
  
    todeIt -D graphics7 gs halt --almostOutOfMemory=65 \; eval "\`     Workspace evaluate: '       Display := DisplayScreen new.       Display setExtent: 800 @ 600 depth: 32.        Display beDisplay.   EventSensor startUp.     MorphicProject new enter  . RectangleMorph new openInWorld.  StringMorph new openInWorld.  [true] whileTrue: [Processor yield]'   \`"
  
    echo "Exit script after stage $TILL_STAGE because of configuration"
    exit 0
  fi
fi

echo "self error: 'the author is confused'"
