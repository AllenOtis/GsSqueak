set u DataCurator p swordfish
login

env 7

set category 'Accessing'
method: ProcessorScheduler
preemtedProcess

"For compatibility with Squeak only"
^ nil
%


method: ProcessorScheduler
remove: aGsProcess ifAbsent: aBlock
 "GsSqueak compatibility"

 (self @env0: _unschedule: aGsProcess) ifNil: aBlock.
 ^aGsProcess
%

method: ProcessorScheduler
terminateActive
 "GsSqueak compatibility"

 activeProcess terminate.
%


method: ProcessorScheduler
anyProcessesAbove: highestPriority
	"Do any instances of Process exist with higher priorities?"

	^(Process allSubInstances select: [:aProcess | 
		aProcess priority > highestPriority]) isEmpty
		"If anyone ever makes a subclass of Process, be sure to use allSubInstances."
%

env 0

set category 'Error Handling'
method: ProcessorScheduler
doesNotUnderstand: aSymbol args: anArray envId: envId
  "Generates an error reporting that the receiver cannot respond to a message.
 because no compiled method was found for aSymbol in method environment
 envId.   envId is a SmallInteger, 0 for Smalltalk , 1 for Ruby , 
 2..255 for future use by Smalltalk package managers .
"

  | ex |
  (envId = 7) ifTrue:
    [self @env0: perform: aSymbol with: anArray]
  (ex := MessageNotUnderstood _basicNew)
    receiver: self
    selector: aSymbol
    args: anArray
    envId: envId.
  ^ ex signal	"fix for #40871"	"Legacy behavior was that you could fall through from an exception handler
without an explicit resume/return. The fix for 40871 will break applications 
that rely on the old behavior."	"If we continue from the error, re-try the send of the message that was
 not understood."	"^ self perform: aSymbol env: envId withArguments: anArray "

