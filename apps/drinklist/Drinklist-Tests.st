TestCase subclass: #CoreTests	instanceVariableNames: 'core seeded'	classVariableNames: ''	poolDictionaries: ''	category: 'Drinklist-Tests'!!CoreTests methodsFor: 'accessing' stamp: 'maf 10/26/2017 11:42'!core		^ core! !!CoreTests methodsFor: 'accessing' stamp: 'maf 10/26/2017 11:42'!core: anObject		core := anObject.! !!CoreTests methodsFor: 'accessing' stamp: 'maf 10/26/2017 15:05'!seeded		^ seeded! !!CoreTests methodsFor: 'accessing' stamp: 'maf 10/26/2017 15:05'!seeded: anObject		seeded := anObject.! !!CoreTests methodsFor: 'as yet unclassified' stamp: 'maf 10/26/2017 11:42'!setUp 	self core: DrinklistCore new! !!CoreTests methodsFor: 'as yet unclassified' stamp: 'WF 11/2/2017 10:02'!testAPI		|user1 user2 tmp drink1 drink2| 		user1 := DrinklistUser create: 'Test'.	user2 := DrinklistUser create: 'banane'.		drink1 := DrinklistDrink create: #mate whichCosts: 1.	drink2 := DrinklistDrink create: #oSaft whichCosts: 2.		self core			add: user1;			add: user2;			add: drink1;			add: drink2.			tmp := self core userNamed: 'Test'.	self assert: (tmp = user1).	! !!CoreTests methodsFor: 'as yet unclassified' stamp: 'maf 10/26/2017 15:08'!testNew	self assert: (self core users isCollection and: self core users isEmpty).	self assert: self core inventory notNil.	self assert: (self core transactions isCollection and: self core transactions isEmpty)! !!CoreTests methodsFor: 'as yet unclassified' stamp: 'maf 10/26/2017 16:03'!testTransactionsFor	| user1 user2 drink1 drink2 |	user1 := DrinklistUser create: 'First User'.	user2 := DrinklistUser create: 'Second User'.	drink1 := DrinklistDrink create: #mate whichCosts: 1.	drink2 := DrinklistDrink create: #coke whichCosts: 2.		self core 		add: (DrinklistTransaction createFor: user1 with: drink1);		add: (DrinklistTransaction createFor: user1 with: drink2);		add: (DrinklistTransaction createFor: user1 with: drink2);		add: (DrinklistTransaction createFor: user1 with: drink1);		add: (DrinklistTransaction createFor: user2 with: drink1);		add: (DrinklistTransaction createFor: user2 with: drink1);		add: (DrinklistTransaction createFor: user2 with: drink1).			self assert: (self core transactionsFor: user1) size = 4.	self assert: (self core transactionsFor: user2) size = 3					! !TestCase subclass: #DrinklistDrinkTests	instanceVariableNames: 'coke mate beer'	classVariableNames: ''	poolDictionaries: ''	category: 'Drinklist-Tests'!!DrinklistDrinkTests methodsFor: 'as yet unclassified' stamp: 'maf 10/26/2017 12:03'!testCreate 	| juice lemonade |		juice := DrinklistDrink create: #juice whichCosts: 1.	lemonade := DrinklistDrink create: #lemonade whichCosts: 2.		self assert: (juice label = #juice and: juice price = 1).	self assert: (lemonade label = #lemonade and: lemonade price = 2).		! !TestCase subclass: #DrinklistTransactionTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Drinklist-Tests'!!DrinklistTransactionTests methodsFor: 'as yet unclassified' stamp: 'maf 10/26/2017 15:00'!testCreate 	| trans user drink |		user := DrinklistUser create: 'Test'.	drink := DrinklistDrink create: #mate whichCosts: 1.	trans := DrinklistTransaction createFor: user with: drink.		self assert: trans user notNil.	self assert: trans item notNil.	self assert: trans date <= TimeStamp now	! !TestCase subclass: #TravisTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Drinklist-Tests'!!TravisTests methodsFor: 'as yet unclassified' stamp: 'maf 10/26/2017 11:00'!testTrue	self assert: true	! !TestCase subclass: #UserTests	instanceVariableNames: 'user'	classVariableNames: ''	poolDictionaries: ''	category: 'Drinklist-Tests'!!UserTests methodsFor: 'as yet unclassified' stamp: 'WF 10/26/2017 15:47'!setUp	self userNamed: (DrinklistUser create: 'Test')! !!UserTests methodsFor: 'as yet unclassified' stamp: 'maf 10/26/2017 14:18'!testBalance	| coke lemon |	self user balance: 0.	coke := DrinklistDrink create: #coke whichCosts: 1.	lemon := DrinklistDrink create: #lemon whichCosts: 2.			self user takeDrink: coke.	self assert: self user balance = 1 negated.		self user takeDrink: lemon.	self assert: self user balance = 3 negated.		self should: [ self user takeDrink: nil ] raise: Exception.	self assert: self user balance = 3 negated.		self user pay: 1.	self assert: self user balance = 2 negated.		self user pay: 0.	self assert: self user balance = 2 negated.		self user pay: 3.	self assert: self user balance = 1.					! !!UserTests methodsFor: 'as yet unclassified' stamp: 'WF 11/2/2017 10:33'!testNew	self assert: self user balance = 0.	self assert: self user userName = 'Test'.	! !!UserTests methodsFor: 'accessing' stamp: 'maf 10/26/2017 11:11'!user		^ user! !!UserTests methodsFor: 'accessing' stamp: 'WF 10/26/2017 15:47'!userNamed: anObject		user := anObject.! !