Object subclass: #DrinklistCore	instanceVariableNames: 'mailClient users inventory transactions'	classVariableNames: ''	poolDictionaries: ''	category: 'Drinklist'!!DrinklistCore methodsFor: 'as yet unclassified' stamp: 'maf 10/26/2017 15:57'!add: anElement	anElement addTo: self! !!DrinklistCore methodsFor: 'as yet unclassified' stamp: 'WF 11/2/2017 10:05'!addDrink: aDrink	inventory at: aDrink label put: aDrink price! !!DrinklistCore methodsFor: 'as yet unclassified' stamp: 'maf 10/26/2017 15:58'!addTransaction: aTransaction	self transactions add: aTransaction! !!DrinklistCore methodsFor: 'as yet unclassified' stamp: 'WF 11/2/2017 10:05'!addUser: aUser	self users at: aUser userName put: aUser! !!DrinklistCore methodsFor: 'as yet unclassified' stamp: 'WF 11/2/2017 09:54'!initialize 	self 		users: Dictionary new;		inventory: Dictionary new;		transactions: OrderedCollection new.! !!DrinklistCore methodsFor: 'as yet unclassified' stamp: 'WF 11/1/2017 11:18'!transactionsFor: anUser	^ self transactions select: [:trans | trans user = anUser ].! !!DrinklistCore methodsFor: 'accessing' stamp: 'WF 11/2/2017 10:28'!buy: aDrinkLabel by: anUserName		|anUser aDrink transaction|		anUser := self userNamed: anUserName.	aDrink := self drinkNamed: aDrinkLabel.		(anUser isNil or: aDrink isNil) ifTrue:[^false].		anUser takeDrink: aDrink.		transaction := DrinklistTransaction createFor: anUserName with: aDrink.	self addTransaction: transaction.		^true! !!DrinklistCore methodsFor: 'accessing' stamp: 'WF 11/2/2017 10:17'!drinkNamed: aLabel	^self inventory at: aLabel.! !!DrinklistCore methodsFor: 'accessing' stamp: 'WF 10/26/2017 15:49'!drinks	^self inventory keys ! !!DrinklistCore methodsFor: 'accessing' stamp: 'maf 10/26/2017 11:45'!inventory		^ inventory! !!DrinklistCore methodsFor: 'accessing' stamp: 'maf 10/26/2017 11:45'!inventory: anObject		inventory := anObject.! !!DrinklistCore methodsFor: 'accessing' stamp: 'WF 11/2/2017 10:30'!mailClient	^ mailClient! !!DrinklistCore methodsFor: 'accessing' stamp: 'WF 11/2/2017 10:30'!mailClient: anObject	mailClient := anObject! !!DrinklistCore methodsFor: 'accessing' stamp: 'maf 10/26/2017 15:07'!transactions		^ transactions! !!DrinklistCore methodsFor: 'accessing' stamp: 'maf 10/26/2017 15:07'!transactions: anObject		transactions := anObject.! !!DrinklistCore methodsFor: 'accessing' stamp: 'WF 11/1/2017 11:19'!userNamed: aName	^self users at: aName.! !!DrinklistCore methodsFor: 'accessing' stamp: 'maf 10/26/2017 11:45'!users		^ users! !!DrinklistCore methodsFor: 'accessing' stamp: 'WF 11/1/2017 12:19'!users: aDictionary		users := aDictionary.! !Object subclass: #DrinklistDrink	instanceVariableNames: 'label price'	classVariableNames: ''	poolDictionaries: ''	category: 'Drinklist'!!DrinklistDrink methodsFor: 'as yet unclassified' stamp: 'maf 10/26/2017 12:09'!addTo: anotherObject	anotherObject addDrink: self! !!DrinklistDrink methodsFor: 'accessing' stamp: 'WF 11/2/2017 10:08'!= anOtherDrink	"Equal means, that my instance variables contain the same values as the other object variables."	|instVarNumber|		anOtherDrink class == self class ifFalse: [^false].	instVarNumber := self class instSize.		^((1 to: instVarNumber) collect: [:i | self instVarAt: i]) = ((1 to:  instVarNumber) collect: [:i | anOtherDrink instVarAt: i])! !!DrinklistDrink methodsFor: 'accessing' stamp: 'maf 10/26/2017 12:05'!label		^ label! !!DrinklistDrink methodsFor: 'accessing' stamp: 'maf 10/26/2017 12:05'!label: anObject		label := anObject.! !!DrinklistDrink methodsFor: 'accessing' stamp: 'maf 10/26/2017 12:05'!price		^ price! !!DrinklistDrink methodsFor: 'accessing' stamp: 'maf 10/26/2017 12:05'!price: anObject		price := anObject.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DrinklistDrink class	instanceVariableNames: ''!!DrinklistDrink class methodsFor: 'as yet unclassified' stamp: 'maf 10/26/2017 12:05'!create: aDrink whichCosts: anAmount	^ DrinklistDrink new						label: aDrink;						price: anAmount;						yourself ! !Object subclass: #DrinklistTransaction	instanceVariableNames: 'user item date'	classVariableNames: ''	poolDictionaries: ''	category: 'Drinklist'!!DrinklistTransaction methodsFor: 'as yet unclassified' stamp: 'maf 10/26/2017 15:59'!addTo: anElement	anElement addTransaction: self! !!DrinklistTransaction methodsFor: 'as yet unclassified' stamp: 'maf 10/26/2017 14:58'!initialize 	super initialize.	self date: TimeStamp now! !!DrinklistTransaction methodsFor: 'accessing' stamp: 'maf 10/26/2017 14:48'!date		^ date! !!DrinklistTransaction methodsFor: 'accessing' stamp: 'maf 10/26/2017 14:48'!date: anObject		date := anObject.! !!DrinklistTransaction methodsFor: 'accessing' stamp: 'maf 10/26/2017 14:59'!item		^ item! !!DrinklistTransaction methodsFor: 'accessing' stamp: 'maf 10/26/2017 14:52'!item: anObject	item := anObject! !!DrinklistTransaction methodsFor: 'accessing' stamp: 'maf 10/26/2017 14:48'!user		^ user! !!DrinklistTransaction methodsFor: 'accessing' stamp: 'maf 10/26/2017 14:48'!user: anObject		user := anObject.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DrinklistTransaction class	instanceVariableNames: ''!!DrinklistTransaction class methodsFor: 'as yet unclassified' stamp: 'maf 10/26/2017 14:58'!createFor: anUser with: item	^ DrinklistTransaction new 							user: anUser;							item: item;							yourself ! !Object subclass: #DrinklistUser	instanceVariableNames: 'balance userName'	classVariableNames: ''	poolDictionaries: ''	category: 'Drinklist'!!DrinklistUser methodsFor: 'accessing' stamp: 'WF 11/2/2017 10:07'!= anOtherUser	"Equal means, that my instance variables contain the same values as the other object variables."	|instVarNumber|		anOtherUser class == self class ifFalse: [^false].	instVarNumber := self class instSize.		^((1 to: instVarNumber) collect: [:i | self instVarAt: i]) = ((1 to:  instVarNumber) collect: [:i | anOtherUser instVarAt: i])! !!DrinklistUser methodsFor: 'accessing' stamp: 'WF 11/1/2017 12:22'!addTo: anElement	anElement addUser: self! !!DrinklistUser methodsFor: 'accessing' stamp: 'maf 10/26/2017 11:14'!balance		^ balance! !!DrinklistUser methodsFor: 'accessing' stamp: 'maf 10/26/2017 11:14'!balance: anObject		balance := anObject.! !!DrinklistUser methodsFor: 'accessing' stamp: 'maf 10/26/2017 11:23'!userName		^ userName! !!DrinklistUser methodsFor: 'accessing' stamp: 'maf 10/26/2017 11:23'!userName: anObject		userName := anObject.! !!DrinklistUser methodsFor: 'initialize-release' stamp: 'WF 11/2/2017 10:32'!initialize 	self balance: self class defaultBalance ! !!DrinklistUser methodsFor: 'as yet unclassified' stamp: 'maf 10/26/2017 14:42'!pay: amount 	self balance: self balance + amount! !!DrinklistUser methodsFor: 'as yet unclassified' stamp: 'maf 10/26/2017 14:19'!takeDrink: aDrink 	self balance: self balance - aDrink price ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DrinklistUser class	instanceVariableNames: ''!!DrinklistUser class methodsFor: 'as yet unclassified' stamp: 'maf 10/26/2017 11:24'!create: aName	^ DrinklistUser new 					userName: aName;					yourself ! !!DrinklistUser class methodsFor: 'as yet unclassified' stamp: 'maf 10/26/2017 11:16'!defaultBalance 	^ 0! !