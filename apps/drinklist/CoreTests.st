'From Squeak6.0alpha of 9 September 2017 [latest update: #17382] on 2 November 2017 at 1:26:46 pm'!TestCase subclass: #CoreTests	instanceVariableNames: 'core seeded'	classVariableNames: ''	poolDictionaries: ''	category: 'Drinklist-Tests'!!CoreTests methodsFor: 'accessing' stamp: 'maf 10/26/2017 11:42'!core		^ core! !!CoreTests methodsFor: 'accessing' stamp: 'maf 10/26/2017 11:42'!core: anObject		core := anObject.! !!CoreTests methodsFor: 'accessing' stamp: 'maf 10/26/2017 15:05'!seeded		^ seeded! !!CoreTests methodsFor: 'accessing' stamp: 'maf 10/26/2017 15:05'!seeded: anObject		seeded := anObject.! !!CoreTests methodsFor: 'as yet unclassified' stamp: 'maf 10/26/2017 11:42'!setUp 	self core: DrinklistCore new! !!CoreTests methodsFor: 'as yet unclassified' stamp: 'hpi 11/2/2017 13:06'!testAPI		|user1 user2 tmp drink1 drink2| 		user1 := DrinklistUser create: 'Test'.	user2 := DrinklistUser create: 'banane'.		drink1 := DrinklistDrink create: #mate whichCosts: 1 initialStock: 10 minimumStock: 2.	drink2 := DrinklistDrink create: #oSaft whichCosts: 2 initialStock: 10 minimumStock: 2.		self core			add: user1;			add: user2;			add: drink1;			add: drink2.			tmp := self core userNamed: 'Test'.	self assert: (tmp = user1).	! !!CoreTests methodsFor: 'as yet unclassified' stamp: 'maf 10/26/2017 15:08'!testNew	self assert: (self core users isCollection and: self core users isEmpty).	self assert: self core inventory notNil.	self assert: (self core transactions isCollection and: self core transactions isEmpty)! !!CoreTests methodsFor: 'as yet unclassified' stamp: 'hpi 11/2/2017 13:04'!testTransactionsFor	| user1 user2 drink1 drink2 |	user1 := DrinklistUser create: 'First User'.	user2 := DrinklistUser create: 'Second User'.	drink1 := DrinklistDrink create: #mate whichCosts: 1 initialStock: 10 minimumStock: 2.	drink2 := DrinklistDrink create: #coke whichCosts: 2 initialStock: 10 minimumStock: 2.		self core 		add: (DrinklistTransaction createFor: user1 with: drink1);		add: (DrinklistTransaction createFor: user1 with: drink2);		add: (DrinklistTransaction createFor: user1 with: drink2);		add: (DrinklistTransaction createFor: user1 with: drink1);		add: (DrinklistTransaction createFor: user2 with: drink1);		add: (DrinklistTransaction createFor: user2 with: drink1);		add: (DrinklistTransaction createFor: user2 with: drink1).			self assert: (self core transactionsFor: user1) size = 4.	self assert: (self core transactionsFor: user2) size = 3					! !