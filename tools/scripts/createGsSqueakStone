#!/bin/bash

set -ex
set -o pipefail

restore=false
restoreFast=false

# Available stages are
# 0 - Import from scratch by creating a stone
# 1 -
# 2 -
# 3 - 
# 4 - 
# 5 -
# 6 -
FROM_STAGE=0
TILL_STAGE=6 # equals numeber of current stages

while getopts f:t: opt; do
	case $opt in
    f)
      echo "Starting from stage $OPTARG"
      FROM_STAGE=$OPTARG
      ;;
    t)
      echo "Importing till stage $OPTARG"
      TILL_STAGE=$OPTARG
      ;;
    /?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
	esac
done


# basic error handling of stages
if [ \( $FROM_STAGE -gt 6 \) -o \( $FROM_STAGE -lt 0 \) ]; then
  echo "Invalid FROM stage ${FROM_STAGE}. Please select a stage between 0 and 6"
  exit 1
fi

if [ \( $TILL_STAGE -gt 6 \) -o \( $TILL_STAGE -lt 0 \) ]; then
  echo "Invalid TILL stage ${TILL_STAGE}. Please select a stage between 0 and 6"
  exit 1
fi

if [ $FROM_STAGE -gt $TILL_STAGE ]; then
  echo "Invalid configuration. You have to specify a FROM stage greater than your TILL stage."
  exit 1
fi


# Get name of the stone
shift $((OPTIND-1))
name=$1;
export name

if [ $FROM_STAGE -le 1 ]; then
  # start import from scratch by creating a stone
  if [ $FROM_STAGE = 0 ]; then
    createStone -f $name 3.5.0 # creates a backup called tode.bdf

    if [ $TILL_STAGE = 0 ]; then
      echo "Exit script after stage 0 because of configuration"
      exit 0
    fi
  # load backup created by tode in order to skip stone creation
  elif [ $FROM_STAGE = 1 ]; then
    todeRestore $name tode.dbf 
  fi

startTopaz $name -l << EOF
set u SystemUser p swordfish
login
run
SystemObjectSecurityPolicy worldAuthorization: #write.
(AllUsers userWithId: 'DataCurator') addPrivilege: #'CompilePrimitives'.
%
run
GsCompilerClasses keysAndValuesDo: [:symbol : class | Globals at: symbol put: class ]
%
commit
logout
login

input $GS_HOME/server/stones/$name/product/upgrade/GsNMethodIr.gs

commit
logout
set u DataCurator p swordfish
login
method: Behavior
_clearSubclassesDisallowed
    self _unsafeAt: 2 put: (format bitAnd: (16r20 bitInvert))
%
send Behavior _clearSubclassesDisallowed
send LargeInteger _clearSubclassesDisallowed

env 7
method: Class
name
    ^ self @env0: name
%

commit
logout
exit
EOF

loadPackage BPBugFixes "tools/bugfixes"
loadPackage MCEnvSwitch "tools/MCEnvSwitch"
loadPackage SqueakParser "parser"
loadPackage SqSuperclasses "tools/superclasses"
loadPackage SqueakEnvironments "tools/SqueakEnvironments"
loadPackage -S SqContext
loadPackage -S SqClassCreation
loadPackage Workspace "tools"
loadPackage -S Env0Extensions
loadPackage -S BPGsTests

# create backup for that stage
todeBackup $name stage-1.dbf

  if [ $TILL_STAGE = 1 ]; then
    echo "Exit script after stage $TILL_STAGE because of configuration"
    exit 0
  fi
fi


if [ $FROM_STAGE -le 2 ]; then
  if [ $FROM_STAGE = 2 ]; then
    todeRestore $name stage-1.dbf
  fi

startTopaz $name -l << EOF
login
run
MCEnv set: 7.
MCEnv useSqueakParser.
Environment initialize.
Object addClassVarName: 'DependentsFields'.
%
commit
logout
exit
EOF

loadPackage EnvironmentsEnv7 "tools/SqueakEnvironments"
loadPackage -S SqContext7
loadPackage -S SqBooleans
loadPackage -S SqClasses
startTopaz $name -l << EOF
login
run
(SqueakEnvironment at: #ProtoObject) _setSelfCanBeSpecial recompileAllMethodsUsingSqueakParserInEnv: 7.
%
commit
logout
exit
EOF

loadPackage -S SqExceptions
loadPackage -S SqNumbers
startTopaz $name -l << EOF
login
run
(SqueakEnvironment at: #Magnitude) _setSelfCanBeSpecial recompileAllMethodsUsingSqueakParserInEnv: 7.
(SqueakEnvironment at: #Number) _setSelfCanBeSpecial recompileAllMethodsUsingSqueakParserInEnv: 7.
(SqueakEnvironment at: #Integer) _setSelfCanBeSpecial recompileAllMethodsUsingSqueakParserInEnv: 7.
(SqueakEnvironment at: #ScaledDecimal) _setSelfCanBeSpecial recompileAllMethodsUsingSqueakParserInEnv: 7.
(SqueakEnvironment at: #Fraction) _setSelfCanBeSpecial recompileAllMethodsUsingSqueakParserInEnv: 7.
MCEnv useGemstoneParser.
%
commit
logout
exit
EOF

loadPackage -S SqBlock
loadPackage -S SqBlock

startTopaz $name -l << EOF
login
run
MCEnv useSqueakParser.
%
commit
logout
exit
EOF

loadPackage -S SqKernel
loadPackage -S SqCharacter

startTopaz $name -l << EOF
login
run
SmalltalkImage newMethodFromSqueakString: 'addToStartUpList: anObject' inEnv: 7.
SmalltalkImage newMethodFromSqueakString: 'addToStartUpList: aClass after: predecessor' inEnv: 7.
SmalltalkImage newMethodFromSqueakString: 'addToStartUpList: aClass before: predecessor' inEnv: 7.
SmalltalkImage newMethodFromSqueakString: 'addToShutDownList: anObject' inEnv: 7.
SmalltalkImage newMethodFromSqueakString: 'addToShutDownList: aClass after: predecessor' inEnv: 7.
SmalltalkImage newMethodFromSqueakString: 'addToShutDownList: aClass before: predecessor' inEnv: 7.
SmalltalkImage newMethodFromSqueakString: 'removeFromStartUpList: anObject' inEnv: 7.
SmalltalkImage newMethodFromSqueakString: 'removeFromShutDownList: anObject' inEnv: 7.

UserGlobals at: #ByteString put: String.
UserGlobals at: #ByteSymbol put: Symbol.
UserGlobals at: #MethodDictionary put: GsMethodDictionary.
UserGlobals at: #CompiledMethod put: GsNMethod.
%
commit
logout
exit
EOF

todeBackup $name stage-2.dbf

  if [ $TILL_STAGE = 2 ]; then
    echo "Exit script after stage $TILL_STAGE because of configuration"
    exit 0
  fi

fi

if [ $FROM_STAGE -le 3 ]; then
  if [ $FROM_STAGE = 3 ]; then
    todeRestore $name stage-2.dbf
  fi

  loadPackage -S '`Collections-Abstract`'
  loadPackage -S '`Collections-Support`'
  loadPackage -S SqCollectionLiterals
  loadPackage -S SqCollections
  loadPackage -S '`Collections-Sequenceable`'
  loadPackage -S '`Collections-Heap`'
  loadPackage -S '`Collections-Arrayed`'
  loadPackage -S '`Graphics-Primitives`'
  loadPackage -S '`Graphics-converting`'
  
  todeBackup $name stage-3.dbf
  
  if [ $TILL_STAGE = 3 ]; then
    echo "Exit script after stage $TILL_STAGE because of configuration"
    exit 0
  fi
fi

if [ $FROM_STAGE -le 4 ]; then
  if [ $FROM_STAGE = 4 ]; then
    todeRestore $name stage-3.dbf
  fi

startTopaz $name -l << EOF
login
run
SqueakEnvironment at: #TextConstants put: SymbolDictionary new
%
commit
logout
exit
EOF
  
  loadPackage -S '`Collections-Text`'
  
  loadPackage -S '`CompiledMethod`'
  loadPackage -S '`SqWeak`'
  loadPackage -S '`System-Object Events`'
  loadPackage -S '`System-Change Notification`'
  loadPackage -S '`Kernel-Models`'
  loadPackage -S '`System-FileRegistry`'
  loadPackage -S '`System-Applications`'
  
  loadPackage -SD '`System-Support`'
  loadPackage -S SUnit
  loadPackage -S '`SqCompiler`'

  loadPackage -S '`System-Preferences`'
  loadPackage -S '`Kernel-Pools`'


  todeBackup $name stage-4.dbf

  if [ $TILL_STAGE = 4 ]; then
    echo "Exit script after stage $TILL_STAGE because of configuration"
    exit 0
  fi
fi

if [ $FROM_STAGE -le 5 ]; then
  if [ $FROM_STAGE = 5 ]; then
    todeRestore $name stage-4.dbf
  fi

  loadPackage -SD '`Kernel-Processes`'
  loadPackage -S '`Kernel-Numbers`'
  
  loadPackage -S '`MockClasses`'
  loadPackage -S '`Chronology-Core`'
  
  loadPackage -S '`Multilingual-TextConversion`'
  loadPackage -S '`Multilingual-Encodings`'

  loadPackage -S '`Balloon`'

  todeBackup $name stage-5.dbf

  if [ $TILL_STAGE = 5 ]; then
    echo "Exit script after stage $TILL_STAGE because of configuration"
    exit 0
  fi
fi

if [ $FROM_STAGE -le 6 ]; then
  if [ $FROM_STAGE = 6 ]; then
    todeRestore $name stage-5.dbf
  fi

  loadPackage -S '`GraphicsLibrary`'
  loadPackage -S '`VMMaker`'
  loadPackage -S '`Graphics-Display Objects`'

  loadPackage -S SqKernelTestsNumbers
  loadPackage -S '`KernelTests-Objects`'
  loadPackage -S '`CollectionsTests-Text`'

startTopaz $name -l << EOF
login
run
(SqueakEnvironment at: #SystemOrganization put: ((SqueakEnvironment at: #SystemOrganizer) @env7: defaultList: SqueakEnvironment allClasses))
%
commit
logout
exit
EOF

  todeBackup $name full.dbf

  if [ $TILL_STAGE = 6 ]; then
    echo "Exit script after stage $TILL_STAGE because of configuration"
    exit 0
  fi
fi

