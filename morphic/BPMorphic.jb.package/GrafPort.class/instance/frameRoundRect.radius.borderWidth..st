drawing support
frameRoundRect: aRectangle radius: radius borderWidth: borderWidth 	| _gsSqueakTemp_nextY _gsSqueakTemp_outer _gsSqueakTemp_nextOuterX _gsSqueakTemp_ovalDiameter _gsSqueakTemp_rectExtent _gsSqueakTemp_rectOffset _gsSqueakTemp_rectX _gsSqueakTemp_rectY _gsSqueakTemp_rectWidth _gsSqueakTemp_rectHeight _gsSqueakTemp_ovalRadius _gsSqueakTemp_ovalRect _gsSqueakTemp_innerRadius _gsSqueakTemp_innerDiameter _gsSqueakTemp_innerRect _gsSqueakTemp_inner _gsSqueakTemp_nextInnerX _gsSqueakTemp_wp |	aRectangle area <= 0		ifTrue: [^ self].	_gsSqueakTemp_ovalDiameter := (radius * 2) asPoint min: aRectangle extent.	(_gsSqueakTemp_ovalDiameter x <= 0			or: [_gsSqueakTemp_ovalDiameter y <= 0])		ifTrue: [^ self fillRect: aRectangle offset: 0 @ 0].	"force diameter to be even - this simplifies lots of stuff"	_gsSqueakTemp_ovalRadius := _gsSqueakTemp_ovalDiameter x // 2 @ (_gsSqueakTemp_ovalDiameter y // 2).	(_gsSqueakTemp_ovalRadius x <= 0			or: [_gsSqueakTemp_ovalRadius y <= 0])		ifTrue: [^ self fillRect: aRectangle offset: 0 @ 0].	_gsSqueakTemp_wp := borderWidth asPoint.	_gsSqueakTemp_ovalDiameter := _gsSqueakTemp_ovalRadius * 2.	_gsSqueakTemp_innerRadius := _gsSqueakTemp_ovalRadius - borderWidth max: 0 @ 0.	_gsSqueakTemp_innerDiameter := _gsSqueakTemp_innerRadius * 2.	_gsSqueakTemp_rectExtent := aRectangle extent - _gsSqueakTemp_ovalDiameter.	_gsSqueakTemp_rectWidth := _gsSqueakTemp_rectExtent x.	_gsSqueakTemp_rectHeight := _gsSqueakTemp_rectExtent y.	_gsSqueakTemp_rectOffset := aRectangle origin + _gsSqueakTemp_ovalRadius.	_gsSqueakTemp_rectX := _gsSqueakTemp_rectOffset x.	_gsSqueakTemp_rectY := _gsSqueakTemp_rectOffset y.	_gsSqueakTemp_ovalRect := 0 @ 0 extent: _gsSqueakTemp_ovalDiameter.	_gsSqueakTemp_innerRect := 0 @ 0 extent: _gsSqueakTemp_innerDiameter.	height := 1.	_gsSqueakTemp_outer := EllipseMidpointTracer new on: _gsSqueakTemp_ovalRect.	_gsSqueakTemp_inner := EllipseMidpointTracer new on: _gsSqueakTemp_innerRect.	_gsSqueakTemp_nextY := _gsSqueakTemp_ovalRadius y.	1		to: (_gsSqueakTemp_wp y min: _gsSqueakTemp_nextY)		do: [:i | 			_gsSqueakTemp_nextOuterX := _gsSqueakTemp_outer stepInY.			width := _gsSqueakTemp_nextOuterX * 2 + _gsSqueakTemp_rectWidth.			destX := _gsSqueakTemp_rectX - _gsSqueakTemp_nextOuterX.			destY := _gsSqueakTemp_rectY - _gsSqueakTemp_nextY.			self copyBits.			destY := _gsSqueakTemp_rectY + _gsSqueakTemp_nextY + _gsSqueakTemp_rectHeight - 1.			self copyBits.			_gsSqueakTemp_nextY := _gsSqueakTemp_nextY - 1].	[_gsSqueakTemp_nextY > 0]		whileTrue: [_gsSqueakTemp_nextOuterX := _gsSqueakTemp_outer stepInY.			_gsSqueakTemp_nextInnerX := _gsSqueakTemp_inner stepInY.			destX := _gsSqueakTemp_rectX - _gsSqueakTemp_nextOuterX.			destY := _gsSqueakTemp_rectY - _gsSqueakTemp_nextY.			width := _gsSqueakTemp_nextOuterX - _gsSqueakTemp_nextInnerX.			self copyBits.			destX := _gsSqueakTemp_rectX + _gsSqueakTemp_nextInnerX + _gsSqueakTemp_rectWidth.			self copyBits.			destX := _gsSqueakTemp_rectX - _gsSqueakTemp_nextOuterX.			destY := _gsSqueakTemp_rectY + _gsSqueakTemp_nextY + _gsSqueakTemp_rectHeight - 1.			self copyBits.			destX := _gsSqueakTemp_rectX + _gsSqueakTemp_nextInnerX + _gsSqueakTemp_rectWidth.			self copyBits.			_gsSqueakTemp_nextY := _gsSqueakTemp_nextY - 1].	destX := aRectangle left.	destY := _gsSqueakTemp_rectOffset y.	height := _gsSqueakTemp_rectHeight.	width := _gsSqueakTemp_wp x.	self copyBits.	destX := aRectangle right - width.	self copyBits.	_gsSqueakTemp_innerRadius y = 0		ifTrue: [destX := aRectangle left + _gsSqueakTemp_wp x.			destY := _gsSqueakTemp_rectY.			width := _gsSqueakTemp_rectWidth.			height := _gsSqueakTemp_wp y - _gsSqueakTemp_ovalRadius y.			self copyBits.			destY := aRectangle bottom - _gsSqueakTemp_wp y.			self copyBits]