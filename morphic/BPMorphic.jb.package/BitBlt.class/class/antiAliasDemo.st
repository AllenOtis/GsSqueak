examples
antiAliasDemo	"To run this demo, use...	Display restoreAfter: [BitBlt antiAliasDemo]	Goes immediately into on-screen paint mode. Option-Click to stop	painting. "	"This code exhibits alpha blending in any display depth by performing	the blend in an off-screen buffer with 32-bit pixels, and then copying	the result back onto the screen with an appropriate color map. - tk	3/10/97 "	"This version uses a sliding buffer for painting that keeps pixels in 32	bits as long as they are in the buffer, so as not to lose info by	converting down	to display resolution and back up to 32 bits at each operation. - di	3/15/97 "	"This version also uses WarpBlt to paint into twice as large a buffer,	and then use smoothing when reducing back down to the display.	In fact this same routine will now work for 3x3 soothing as well.	Remove the statements 'buff displayAt: 0@0' to hide the buffer. - di	3/19/97 "	"compute color maps if needed"	| _gsSqueakTemp_brush _gsSqueakTemp_buff _gsSqueakTemp_dispToBuff _gsSqueakTemp_buffToDisplay _gsSqueakTemp_mapDto32 _gsSqueakTemp_map32toD _gsSqueakTemp_prevP _gsSqueakTemp_p _gsSqueakTemp_brushToBuff _gsSqueakTemp_theta _gsSqueakTemp_buffRect _gsSqueakTemp_buffSize _gsSqueakTemp_buffToBuff _gsSqueakTemp_brushRect _gsSqueakTemp_delta _gsSqueakTemp_newBuffRect _gsSqueakTemp_updateRect _gsSqueakTemp_scale _gsSqueakTemp_p0 |	Display depth <= 8		ifTrue: [_gsSqueakTemp_mapDto32 := Color cachedColormapFrom: Display depth to: 32.			_gsSqueakTemp_map32toD := Color cachedColormapFrom: 32 to: Display depth].	"Create a brush with radially varying alpha"	_gsSqueakTemp_brush := Form extent: 3 @ 3 depth: 32.	_gsSqueakTemp_brush		fill: _gsSqueakTemp_brush boundingBox		fillColor: (Color red alpha: 0.05).	_gsSqueakTemp_brush		fill: (1 @ 1 extent: 1 @ 1)		fillColor: (Color red alpha: 0.2).	_gsSqueakTemp_scale := 2.	"Actual drawing happens at this magnification"	"Scale brush up for painting in magnified buffer"	_gsSqueakTemp_brush := _gsSqueakTemp_brush magnify: _gsSqueakTemp_brush boundingBox by: _gsSqueakTemp_scale.	"Now paint with the brush using alpha blending."	_gsSqueakTemp_buffSize := 100.	_gsSqueakTemp_buff := Form extent: _gsSqueakTemp_brush extent + _gsSqueakTemp_buffSize * _gsSqueakTemp_scale depth: 32.	"Travelling 32-bit buffer"	_gsSqueakTemp_dispToBuff := (WarpBlt toForm: _gsSqueakTemp_buff) sourceForm: Display;				 colorMap: _gsSqueakTemp_mapDto32;				 combinationRule: Form over.	"From Display to buff - magnify by 2"	_gsSqueakTemp_brushToBuff := (BitBlt toForm: _gsSqueakTemp_buff) sourceForm: _gsSqueakTemp_brush;				 sourceOrigin: 0 @ 0;				 combinationRule: Form blend.	"From brush to buff"	_gsSqueakTemp_buffToDisplay := (WarpBlt toForm: Display) sourceForm: _gsSqueakTemp_buff;				 colorMap: _gsSqueakTemp_map32toD;				 cellSize: _gsSqueakTemp_scale;				 combinationRule: Form over.	"From buff to Display - shrink by 2"	"...and use smoothing"	_gsSqueakTemp_buffToBuff := BitBlt toForm: _gsSqueakTemp_buff.	"This is for slewing the buffer"	[Sensor yellowButtonPressed]		whileFalse: [_gsSqueakTemp_prevP := nil.			_gsSqueakTemp_buffRect := Sensor cursorPoint - (_gsSqueakTemp_buff extent // _gsSqueakTemp_scale // 2) extent: _gsSqueakTemp_buff extent // _gsSqueakTemp_scale.			_gsSqueakTemp_p0 := _gsSqueakTemp_buff extent // 2 - (_gsSqueakTemp_buffRect extent // 2).			_gsSqueakTemp_dispToBuff copyQuad: _gsSqueakTemp_buffRect innerCorners toRect: _gsSqueakTemp_buff boundingBox.			_gsSqueakTemp_buff displayAt: 0 @ 0.			"** remove to hide sliding buffer **"			[Sensor redButtonPressed]				whileTrue: ["Here is the painting loop"					_gsSqueakTemp_p := Sensor cursorPoint - _gsSqueakTemp_buffRect origin + _gsSqueakTemp_p0.					"p, prevP are rel to buff origin"					(_gsSqueakTemp_prevP == nil							or: [_gsSqueakTemp_prevP ~= _gsSqueakTemp_p])						ifTrue: [_gsSqueakTemp_prevP == nil								ifTrue: [_gsSqueakTemp_prevP := _gsSqueakTemp_p].							(_gsSqueakTemp_p dist: _gsSqueakTemp_prevP)									> (_gsSqueakTemp_buffSize - 1)								ifTrue: ["Stroke too long to fit in buffer -- clip to									buffer, and next time through will do									more of it"									_gsSqueakTemp_theta := (_gsSqueakTemp_p - _gsSqueakTemp_prevP) theta.									_gsSqueakTemp_p := (_gsSqueakTemp_theta cos @ _gsSqueakTemp_theta sin * (_gsSqueakTemp_buffSize - 2) asFloat + _gsSqueakTemp_prevP) truncated].							_gsSqueakTemp_brushRect := _gsSqueakTemp_p extent: _gsSqueakTemp_brush extent.							((_gsSqueakTemp_buff boundingBox insetBy: _gsSqueakTemp_scale)									containsRect: _gsSqueakTemp_brushRect)								ifFalse: ["Brush is out of buffer region. Scroll the									buffer, and fill vacated regions from									the display"									_gsSqueakTemp_delta := (_gsSqueakTemp_brushRect												amountToTranslateWithin: (_gsSqueakTemp_buff boundingBox insetBy: _gsSqueakTemp_scale))												// _gsSqueakTemp_scale.									_gsSqueakTemp_buffToBuff										copyFrom: _gsSqueakTemp_buff boundingBox										in: _gsSqueakTemp_buff										to: _gsSqueakTemp_delta * _gsSqueakTemp_scale.									_gsSqueakTemp_newBuffRect := _gsSqueakTemp_buffRect translateBy: _gsSqueakTemp_delta negated.									_gsSqueakTemp_p := _gsSqueakTemp_p translateBy: _gsSqueakTemp_delta * _gsSqueakTemp_scale.									_gsSqueakTemp_prevP := _gsSqueakTemp_prevP translateBy: _gsSqueakTemp_delta * _gsSqueakTemp_scale.									(_gsSqueakTemp_newBuffRect areasOutside: _gsSqueakTemp_buffRect)										do: [:r | _gsSqueakTemp_dispToBuff												copyQuad: r innerCorners												toRect: (r origin - _gsSqueakTemp_newBuffRect origin * _gsSqueakTemp_scale extent: r extent * _gsSqueakTemp_scale)].									_gsSqueakTemp_buffRect := _gsSqueakTemp_newBuffRect].							"Interpolate from prevP to p..."							_gsSqueakTemp_brushToBuff								drawFrom: _gsSqueakTemp_prevP								to: _gsSqueakTemp_p								withFirstPoint: false.							_gsSqueakTemp_buff displayAt: 0 @ 0.							"** remove to hide sliding buffer **"							"Update (only) the altered pixels of the							destination "							_gsSqueakTemp_updateRect := (_gsSqueakTemp_p min: _gsSqueakTemp_prevP)										corner: (_gsSqueakTemp_p max: _gsSqueakTemp_prevP)												+ _gsSqueakTemp_brush extent.							_gsSqueakTemp_updateRect := _gsSqueakTemp_updateRect origin // _gsSqueakTemp_scale * _gsSqueakTemp_scale corner: _gsSqueakTemp_updateRect corner + _gsSqueakTemp_scale // _gsSqueakTemp_scale * _gsSqueakTemp_scale.							_gsSqueakTemp_buffToDisplay								copyQuad: _gsSqueakTemp_updateRect innerCorners								toRect: (_gsSqueakTemp_updateRect origin // _gsSqueakTemp_scale + _gsSqueakTemp_buffRect origin extent: _gsSqueakTemp_updateRect extent // _gsSqueakTemp_scale).							_gsSqueakTemp_prevP := _gsSqueakTemp_p]]]