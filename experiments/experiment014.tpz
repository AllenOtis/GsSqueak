


set user SystemUser p swordfish
login
set compile_env: 7

set compile_env: 7
category: 'experiment'
method: Class
subclass: a instanceVariableNames: b classVariableNames: c poolDictionaries: d category: e
^ self @env0: subclass: a instanceVariableNames: b classVariableNames: c poolDictionaries: d category: e.
%

category: 'experiment'
method: Class
commentStamp: aStamp prior: anInt
^ self @env0: commentStamp: aStamp prior: anInt
%

category: 'experiment'
method: Class
methodsFor: categoryName stamp: aString
^ self @env0: methodsFor: categoryName stamp: aString.
%

category: 'experiment'
classmethod: Object
class
^ self @env0: class
%

category: 'experiment'
method: Metaclass3
instanceVariableNames: instanceVariableNames
^ self @env0: instanceVariableNames: instanceVariableNames
%

category: 'experiment'
method: Class
methodsFor: categoryName stamp: aString
^ self @env0: methodsFor: categoryName stamp: aString
%

category: 'experiment'
method: Behavior
methodsFor: categoryName stamp: aString
^ self @env0: methodsFor: categoryName stamp: aString
%

set compile_env: 0
category: 'experiment'
method: Behavior
compileMethod: source category: cat environmentId: anEnvironmentId
  | errorString |
  [ 
  self
    compileMethod: source
    category: cat
    using: GsSession currentSession symbolList
    environmentId: anEnvironmentId
    ]
    onException: CompileError
    do: [ :ex | 
      errorString := GsNMethod
        _sourceWithErrors: ex errorDetails
        fromString: ex sourceString ].
  errorString
    ifNotNil: [ 
      self
        error:
          'Compile error in Class: ' , self name printString , ' method: ' , errorString.	"if user continues from the error, we return the errorString"
      ^ errorString ].
  ^ nil	"return nil to indicate no errors"
%

set compile_env: 0
category: 'experiment'
method: ClassCategoryReader
scanFrom: aStream inEnv: envID
  "File in methods from the stream, aStream."

  | methodText |
  [ 
  methodText := aStream nextChunk.
  methodText size > 0 ]
    whileTrue: [ 
      class
        compileMethod: methodText withGemstoneLineEndings
        category: category
        environmentId: envID.
      changeStamp ~~ nil
        ifTrue: [ 
          class
            setStamp: changeStamp
            forMethod: (Behavior parseSelector: methodText for: class) ] ]
%

logout
set user DataCurator p swordfish
login

set compile_env: 0
category: 'experiment'
method: RWBinaryOrTextStream
fileInInEnv: envId
  | val |
  [ self atEnd ]
    whileFalse: [ 
      self skipSeparators.
      val := (self peekFor: $!)
        ifTrue: [ 
          | chunk classReader |
          chunk := self nextChunk.
          classReader := chunk evaluateInEnv: envId.
          classReader scanFrom: self inEnv: envId ]
        ifFalse: [ self nextChunk evaluateInEnv: envId ] ].
  ^ val
%

set compile_env: 0
category: 'experiment'
method: ClassCommentReader
scanFrom: aStream inEnv: anID
  ^ self scanFrom: aStream


logout



set user DataCurator p swordfish
login

set compile_env: 0
run
BPCodeClient importClass: #SMTPClient.
%
