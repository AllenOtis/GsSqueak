TDStringLeafNode{#name:'doit_save_cypress',#contents:'| scheme knownPackageNames allPackageNames repoUrl packageNames repo |
  scheme := \'topaz\'.
  scheme := \'cypress\'.
  packageNames := #(\'Cypress-Definitions\' \'Cypress-Structure\' \'Cypress-GemStoneFileServer\' \'Cypress-Network-Url\' \'Cypress-MesssageDigest\' \'Cypress-Comparison\' \'Cypress-PackageManagement\').
  allPackageNames := knownPackageNames := #(\'Cypress-Comparison\' \'Cypress-Definitions\' \'Cypress-GemStoneFileServer\' \'Cypress-MesssageDigest\' \'Cypress-PackageManagement\' \'Cypress-Structure\' \'Cypress-Network-Url\').
  repoUrl := scheme = \'topaz\'
    ifTrue: [ \'topaz:$GS_HOME/shared/repos/CypressReferenceImplementation/topaz/\' ]
    ifFalse: [ \'cypress:$GS_HOME/shared/repos/CypressReferenceImplementation/cypress/\' ].
  packageNames
    do: [ :packageName | 
      (allPackageNames includes: packageName)
        ifFalse: [ self error: \'Unknown package name: \' , packageName ] ].
  packageNames isEmpty
    ifTrue: [ packageNames := knownPackageNames ].
  repo := CypressAbstractRepository
    onUrl: (CypressUrl absoluteFromText: repoUrl)
    alias: \'\'.
  packageNames
    do: [ :packageName | 
      Transcript
        cr;
        show: \'Writing \' , packageName printString.
      repo
        writePackageStructure:
          (CypressPackageStructure
            fromPackage: (CypressPackageDefinition named: packageName)) ]',#creationTime:DateAndTime['2017-10-10T11:48:27.16390490531921-07:00'],#modificationTime:DateAndTime['2017-10-10T12:12:43.28735399246216-07:00']}