TDScriptLeafNode{#name:'install',#contents:'[ :topez :objIn :tokens :command :commandNode | 
  | opts args |
  \"for help: ./install -h\"
  command
    getOptsMixedLongShort:
      {#(\'help\' $h #\'none\').
      #(\'force\' nil #\'none\').
      #(\'json\' nil #\'none\').
      #(\'list\' nil #\'none\').
      #(\'transientList\' nil #\'none\').
      #(\'clean\' nil #\'none\').
      #(\'cypress\' nil #\'optional\').
      #(\'metacello\' nil #\'none\').
      #(\'remoteTode\' nil #\'none\')}
    optionsAndArguments: [ :options :operands | 
      opts := options.
      args := operands ].
  opts
    at: \'help\'
    ifAbsent: [ 
      | session remoteBlock json result force packageName |
      session := topez evaluateCommandString: \'./remote --session\'.
      session
        ifNil: [ 
          session := topez
            evaluateCommandString:
              \'/home/remote  --username=SystemUser --password=swordfish --login=\'
                , topez serverStoneName ].
      packageName := remoteBlock := nil.
      json := opts includesKey: \'json\'.
      force := opts includesKey: \'force\'.
      opts
        at: \'clean\'
        ifPresent: [ :ignored | 
          remoteBlock := [ :forceBool :pkgName | 
          | symbolList symDict |
          System abort.
          #(#\'MetacelloGlobals\' #\'TodeRemoteSupport\')
            do: [ :symbol | 
              symbolList := System myUserProfile symbolList.
              [ (symDict := symbolList objectNamed: symbol) notNil ]
                whileTrue: [ symbolList remove: symDict ] ].
          System commit ] ].
      opts
        at: \'list\'
        ifPresent: [ :ignored | 
          json := true.
          remoteBlock := [ :forceBool :pkgName | (System myUserProfile symbolList collect: [ :each | each name ]) asJson ] ].
      opts
        at: \'transientList\'
        ifPresent: [ :ignored | 
          json := true.
          remoteBlock := [ :forceBool :pkgName | (GsSession currentSession symbolList collect: [ :each | each name ]) asJson ] ].
      opts
        at: \'metacello\'
        ifPresent: [ :ignored | 
          remoteBlock := [ :forceBool :pkgName | 
          | packageManager repo packageNames summary stream |
          System abort.
          packageNames := #(\'Metacello-Base\' \'Metacello-GsCypress-Base\' \'Metacello-Core\' \'Metacello-Platform.gscypress\' \'Metacello-GsCypress-Platform\' \'Metacello-MC\' \'Metacello-Cypress\' \'Metacello-GsCypress-MC\' \'Metacello-TestsCore\' \'Metacello-TestsMCCore\' \'Metacello-TestsBaselineGsCypress\').
          packageManager := CypressPackageManager2 new.
          repo := CypressAbstractRepository
            onUrl:
              \'cypressfiletree:/export/foos1/users/dhenrich/dev/_home/server/stones/metacello/git/metacello-work/repository/\'
                asUrl
            alias: \'MetacelloGlobals\'.
          forceBool
            ifTrue: [ 
              | symbolList |
              symbolList := System myUserProfile symbolList.
              (symbolList objectNamed: #\'MetacelloGlobals\')
                ifNotNil: [ :metacelloGlobals | symbolList remove: metacelloGlobals ].
              System myUserProfile _createDictionary: #\'MetacelloGlobals\' at: 1.
              false
                ifTrue: [ (System myUserProfile objectNamed: #\'MetacelloGlobals\') at: #\'Pragma\' put: nil\t\"placeholder for Pragma class -- port to base since folks would like it anyway\" ] ].
          stream := WriteStream on: String new.
          packageNames
            do: [ :each | 
              stream nextPutAll: \'Loading \' , each , \'...\'.
              summary := packageManager
                loadPackageFrom: (CypressKnownPackageInformation named: each)
                defaultSymbolDictionaryName: #\'MetacelloGlobals\'
                inRepository: repo.
              summary isEmpty
                ifFalse: [ self error: \'Could not reload package named: \' , each printString ].
              stream nextPutAll: \'done\' ].
          System commit.
          stream contents ] ].
      opts
        at: \'cypress\'
        ifPresent: [ :pName | 
          packageName := pName.
          remoteBlock := [ :forceBool :pkgName | 
          | packageManager repo packageNames summary stream |
          System abort.
          pkgName
            ifNil: [ packageNames := #(\'Cypress-GemStoneCompatibilityLayer\' \'Cypress-Definitions\' \'Cypress-Structure\' \'Cypress-GemStoneFileServer\' \'Network-Url\' \'Cypress-MesssageDigest\' \'Cypress-Comparison\' \'Cypress-PackageManagement\') ]
            ifNotNil: [ :ignored | packageNames := {pkgName} ].
          packageManager := CypressPackageManager2 new.
          repo := CypressAbstractRepository
            onUrl:
              \'cypress:/export/foos1/users/dhenrich/dev/_home/shared/repos/CypressReferenceImplementation/cypress/\'
                asUrl
            alias: \'Cypress Reference\'.
          stream := WriteStream on: String new.
          packageNames
            do: [ :each | 
              stream nextPutAll: \'Loading \' , each , \'...\'.
              summary := packageManager
                loadPackageFrom: (CypressKnownPackageInformation named: each)
                defaultSymbolDictionaryName: #\'Globals\'
                inRepository: repo.
              summary isEmpty
                ifFalse: [ self error: \'Could not reload package named: \' , each printString ].
              stream nextPutAll: \'done\' ].
          System commit.
          stream contents ] ].
      opts
        at: \'remoteTode\'
        ifPresent: [ :ignored | 
          remoteBlock := [ :forceBool :pkgName | 
          | packageManager repo packageNames summary stream |
          System abort.
          packageNames := #(\'Tode-Remote-Server\').
          packageManager := CypressPackageManager2 new.
          repo := CypressAbstractRepository
            onUrl:
              (CypressUrl
        absoluteFromText:
          \'cypressfiletree:/export/foos1/users/dhenrich/dev/_home/shared/repos/tode/repository/\')
            alias: \'Remote Tode\'.
          forceBool
            ifTrue: [ 
              | symbolList |
              symbolList := System myUserProfile symbolList.
              (symbolList objectNamed: #\'TodeRemoteSupport\')
                ifNotNil: [ :glob | symbolList remove: glob ].
              System myUserProfile _createDictionary: #\'TodeRemoteSupport\' at: 1 ].
          stream := WriteStream on: String new.
          packageNames
            do: [ :each | 
              stream nextPutAll: \'Loading \' , each , \'...\'.
              summary := packageManager
                loadPackageFrom: (CypressKnownPackageInformation named: each)
                defaultSymbolDictionaryName: #\'TodeRemoteSupport\'
                inRepository: repo.
              summary isEmpty
                ifFalse: [ self error: \'Could not reload package named: \' , each printString ].
              stream nextPutAll: \'done\' ].
          System commit.
          stream contents ] ].
      result := session executeBlock: remoteBlock with: force with: packageName.
      json
        ifTrue: [ STON fromString: result ]
        ifFalse: [ result ] ]
    ifPresent: [ :ignored | 
      TDManPage
        viewManPage:
          \'NAME
  install - install script utility template
SYNOPSIS
  install [-h|--help]
DESCRIPTION

EXAMPLES
  ./install -h

  ./remote  --username=SystemUser --password=swordfish --login=cypress
  ./install --force --remoteTode

  ./remote  --username=SystemUser --password=swordfish --login=cypress
  ./install --force --cypress
  ./remote --logout
  ./remote  --username=SystemUser --password=swordfish --login=cypress

  ./remote  --username=SystemUser --password=swordfish --login=cypress
  ./install --force --metacello

  ./install --cypress=BaselineOfCypress
  ./install --cypress=Cypress-Tests
  ./install --cypress=NetworkTests

  ./install --clean
  ./install --list; edit
  ./install --transientList; edit
\'
        topez: topez ] ]',#creationTime:DateAndTime['2016-09-16T06:34:09.561981916427612-07:00'],#modificationTime:DateAndTime['2017-10-18T10:15:19.83024096488953-07:00']}