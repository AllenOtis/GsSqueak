TDScriptLeafNode{#name:'export',#contents:'[ :topez :objIn :tokens :command :commandNode | 
  | opts args |
  \"for help: ./export -h\"
  command
    getOptsMixedLongShort:
      {#(\'help\' $h #\'none\').
      #(\'cypress\' nil #\'required\').
      #(\'cypress34\' nil #\'required\').
      #(\'project\' nil #\'required\').
      #(\'repoUrl\' nil #\'required\').
      #(\'metacello\' nil #\'optional\')}
    optionsAndArguments: [ :options :operands | 
      opts := options.
      args := operands ].
  opts
    at: \'help\'
    ifAbsent: [ 
      | session packageNames knownPackageNames allPackageNames repoUrl |
      session := topez evaluateCommandString: \'/home/remote --session\'.
      session
        ifNil: [ 
          session := topez
            evaluateCommandString:
              \'/home/remote  --username=SystemUser --password=swordfish --login=\'
                , topez serverStoneName ].
      packageNames := args.
      opts
        at: \'project\'
        ifPresent: [ :projectName | 
          opts at: \'repoUrl\' ifPresent: [ :urlString | repoUrl := urlString ].
          session
            executeBlock: [ :urlString :projName | 
              | url repo pkgNames textDiffMap stream |
              System abort.
              url := urlString asUrl.
              stream := WriteStream on: String new.
              stream
                nextPutAll: url pathForDirectory;
                lf.
              pkgNames := ((MetacelloProjectRegistration registry
                registrationForClassNamed: projName
                ifAbsent: [  ]) baselineProjectSpec version packages
                select: [ :pkg | pkg isPackageLoaded ])
                collect: [ :pkgSpec | pkgSpec name ].
              textDiffMap := (CypressPackageStringComparator new
                comparingPackages: pkgNames
                fromDirectory: url pathForDirectory) getDifferences.
              repo := CypressAbstractRepository onUrl: url alias: \'\'.
              stream
                nextPutAll:
                    ((textDiffMap at: \'operations\') select: [ :dict | dict isEmpty not ]) keys
                        printString;
                lf.
              ((textDiffMap at: \'operations\')
                select: [ :dict | dict isEmpty not ]) keys
                do: [ :packageName | 
                  stream
                    nextPutAll: \'Writing \' , packageName printString;
                    lf.
                  repo
                    writePackageStructure:
                      (CypressPackageStructure
                        fromPackage:
                          (CypressPackageDefinition named: packageName)) ].
              stream contents ]
            with: repoUrl
            with: projectName ]
        ifAbsent: [ 
          opts
            at: \'cypress\'
            ifPresent: [ :scheme | 
              allPackageNames := #(\'Cypress-Comparison\' \'Cypress-Definitions\' \'Cypress-GemStoneCompatibilityLayer\' \'Cypress-GemStoneFileServer\' \'Cypress-MesssageDigest\' \'Cypress-Mocks\' \'Cypress-PackageManagement\' \'Cypress-PackageManagementTests\' \'Cypress-Structure\' \'Cypress-Tests\' \'NetworkTests\' \'Network-Url\' \'BaselineOfCypress\').
              knownPackageNames := #(\'Cypress-GemStoneCompatibilityLayer\' \'Cypress-Definitions\' \'Cypress-Structure\' \'Cypress-GemStoneFileServer\' \'Network-Url\' \'Cypress-MesssageDigest\' \'Cypress-Comparison\' \'Cypress-PackageManagement\' \'BaselineOfCypress\').
              repoUrl := scheme
                , \':$GS_HOME/shared/repos/CypressReferenceImplementation/\'
                , scheme , \'/\' ].
          opts
            at: \'cypress34\'
            ifPresent: [ :scheme | 
              allPackageNames := #(\'Cypress-Comparison\' \'Cypress-Definitions\' \'Cypress-GemStoneFileServer\' \'Cypress-MesssageDigest\' \'Cypress-PackageManagement\' \'Cypress-Structure\' \'Cypress-Network-Url\').
              knownPackageNames := #(\'Cypress-Definitions\' \'Cypress-Structure\' \'Cypress-GemStoneFileServer\' \'Cypress-Network-Url\' \'Cypress-MesssageDigest\' \'Cypress-Comparison\' \'Cypress-PackageManagement\').
              repoUrl := scheme
                , \':$GS_HOME/shared/repos/CypressReferenceImplementation/\'
                , scheme , \'/\' ].
          opts
            at: \'metacello\'
            ifPresent: [ :scheme | 
              allPackageNames := knownPackageNames := #(\'Metacello-Base\' \'Metacello-GsCypress-Base\' \'Metacello-Core\' \'Metacello-Platform.gscypress\' \'Metacello-GsCypress-Platform\' \'Metacello-MC\' \'Metacello-Cypress\' \'Metacello-GsCypress-MC\' \'Metacello-TestsCore\' \'Metacello-TestsMCCore\' \'Metacello-TestsBaselineGsCypress\').
              repoUrl := scheme = \'topaz\'
                ifTrue: [ \'topaz:$GS_HOME/server/stones/metacello/git/topaz/\' ]
                ifFalse: [ \'cypressft:$GS_HOME/server/stones/metacello/git/metacello-work/repository/\' ] ].
          packageNames
            do: [ :packageName | 
              (allPackageNames includes: packageName)
                ifFalse: [ self error: \'Unknown package name: \' , packageName ] ].
          packageNames isEmpty
            ifTrue: [ packageNames := knownPackageNames ].
          session
            executeBlock: [ :repoUrlString :packageNamesJSON | 
              | repo |
              System abort.
              repo := CypressAbstractRepository
                onUrl: repoUrlString asUrl
                alias: \'\'.
              (CypressJsonParser parse: packageNamesJSON)
                do: [ :packageName | 
                  Transcript
                    cr;
                    show: \'Writing \' , packageName printString.
                  repo
                    writePackageStructure:
                      (CypressPackageStructure
                        fromPackage:
                          (CypressPackageDefinition named: packageName)).
                  true ] ]
            with: repoUrl
            with: packageNames asJson ] ]
    ifPresent: [ :ignored | 
      TDManPage
        viewManPage:
          \'NAME
  export - export script utility template
SYNOPSIS
  export [-h|--help]
DESCRIPTION
EXAMPLES
  ./export --help
  ./export -h

  ./export --cypress=topaz Cypress-Structure
  ./export --cypress=cypress Cypress-Structure
  ./export --cypress=cypress Cypress-PackageManagement

  # gemstone 3.4.0 
  ./export --cypress34=cypress
  ./export --cypress34=topaz Cypress-Definitions Cypress-Structure Cypress-GemStoneFileServer \\
                           Cypress-Network-Url Cypress-MesssageDigest Cypress-Comparison \\
                           Cypress-PackageManagement

  ./export --metacello Metacello-GsCypress-MC
  ./export --metacello=topaz

  ./export --project=Ston --repoUrl=cypressfiletree:/export/foos1/users/dhenrich/dev/_home/server/stones/m_340/git/ston/repository/
\'
        topez: topez ] ]',#creationTime:DateAndTime['2016-09-16T06:33:54.12049603462219-07:00'],#modificationTime:DateAndTime['2017-10-10T11:43:29.59513401985168-07:00']}