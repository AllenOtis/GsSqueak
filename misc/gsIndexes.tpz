 login
 run
 (SqueakEnvironment at: #UnorderedCollection) compileMethod: '
 _asIdentityBag
    "Returns the receiver."
    ^ self @env7: asArray
 ' dictionaries: GsSession currentSession symbolList
category: 'GsIndexes'
environmentId: 0.
%

run
 (SqueakEnvironment at: #UnorderedCollection) compileMethod: '
 _checkIndexPathExpression: aPathString
  "Raises an error if the given path expression (an Array of Strings), is
 not valid; otherwise returns the receiver."
  ^ aPathString asArrayOfPathTerms
 ' dictionaries: GsSession currentSession symbolList
category: 'GsIndexes'
environmentId: 0.
%

run
 (SqueakEnvironment at: #UnorderedCollection) compileMethod: '
 _doUpdateIndexesForAdditionOf: anObject iList: iList logging: doLogging
  "anObject is being added to the receiver.  Update any indexes if necessary.
 Returns true if the index objects were modified correctly; otherwise returns
 an Array containing error information."

  | mapInfo rootTerms i sz num val prevTerm aSet rootObjects |
  rootTerms := iList rootTerms.
  sz := rootTerms size.
  1 to: iList size by: 2 do: [ :j | 
    | indexObj offset indexDict pathTerm |
    "Make a pass through the indexedPaths to see if the receiver participates as a
 set-valued instance variable.  If so, then must update the index dictionary."
    indexObj := iList at: j.
    offset := iList at: j + 1.
    (offset > 1
      _and: [ 
        indexObj isComplete
          _and: [ 
            " get the previous path term (the one with an asterisk) "
            pathTerm := indexObj at: offset - 1.
            pathTerm hasIndexDictionary ] ])
      ifTrue: [ 
        " lazy initialization of aSet (in case we don''t ever need it) "
        aSet == nil
          ifTrue: [ aSet := IdentitySet new ].	" only update the dictionary if we haven''t already done it "
        (aSet includesIdentical: pathTerm)
          ifFalse: [ 
            aSet add: pathTerm.
            indexDict := indexObj indexDictionary.	" see how many entries exist "
            val := indexDict
              at: self
              term: pathTerm getParentTerm
              otherwise: nil.
            nil == val
              ifTrue: [ indexDict _errorNoEntryForKey: self term: pathTerm getParentTerm value: nil ]
              ifFalse: [ 
                (BucketValueBag _hasInstance: val)
                  ifTrue: [ num := val size ]
                  ifFalse: [ num := 1 ] ].
            num
              timesRepeat: [ 
                " add a dictionary entry for anObject -> NSC "
                indexDict
                  _at: anObject
                  put: self
                  term: pathTerm
                  logging: doLogging ] ] ] ].
  i := 1.
  [ i <= sz and: [ i <= rootTerms size ] ]
    whileTrue: [ 
      | pathTerm |
      " now make a pass through the root path terms "
      (pathTerm := rootTerms at: i) _isObsoletePathTerm
        ifFalse: [ 
          " see if the receiver is participating as a set-valued instance variable "
          pathTerm offset == 1
            ifTrue: [ num := 1 ]
            ifFalse: [ 
              pathTerm hasIndexDictionary
                ifTrue: [ 
                  " get the path term before the set-valued path term "
                  prevTerm := pathTerm getParentTerm.
                  pathTerm indicatesIndexOnNscElements
                    ifFalse: [ prevTerm := prevTerm getParentTerm ].
                  val := pathTerm getIndexDictionary
                    at: self
                    term: prevTerm
                    otherwise: nil.
                  nil == val
                    ifTrue: [ 
                      " if not found, then mappings have already been added "
                      num := 0 ]
                    ifFalse: [ 
                      (BucketValueBag _hasInstance: val)
                        ifTrue: [ num := val size ]
                        ifFalse: [ num := 1 ] ] ]
                ifFalse: [ 
                  "receiver is the ''*'' for a set valued term"
                  prevTerm := pathTerm indicatesIndexOnNscElements
                    ifTrue: [ pathTerm ]
                    ifFalse: [ pathTerm getParentTerm ].
                  rootObjects := prevTerm findReachableRootsFor: self.
                  pathTerm indicatesIndexOnNscElements
                    ifFalse: [ rootObjects := rootObjects asIdentitySet ] ] ].
          pathTerm indicatesIndexOnNscElements
            ifTrue: [ 
              " if the index is on elements of the NSC, go ahead and update the indexes "
              pathTerm updateBtree
                ifNotNil: [ 
                  (pathTerm _checkBtreeComparisonWith: anObject)
                    ifFalse: [ 
                      | exa |
                      (exa := ImproperOperation new)
                        _number:
                            (ErrorSymbols at: #''rtErrRangeEqualityIndexInvalidClassKindForBtree'');
                        args:
                            {(anObject class).
                              (pathTerm name).
                              (pathTerm updateBtree lastElementClassDescription)}.
                      i > 1
                        ifTrue: [ 
                          " indexing objects have been modified, prevent commits "
                          exa signal ]
                        ifFalse: [ 
                          ^ {false.	" indicating no indexing objects were modified "
                          exa} ] ] ].
              pathTerm hasIndexDictionary
                ifTrue: [ num timesRepeat: [ pathTerm addDirectMappingFor: anObject logging: doLogging ] ]
                ifFalse: [ 
                  rootObjects == nil
                    ifTrue: [ 
                      pathTerm
                        addDirectMappingFor: anObject
                        root: anObject
                        nsc: self
                        logging: doLogging ]
                    ifFalse: [ 
                      rootObjects
                        do: [ :root | 
                          pathTerm
                            addDirectMappingFor: anObject
                            root: root
                            nsc: self
                            logging: doLogging ] ] ] ]
            ifFalse: [ 
              (pathTerm _doNotPerformPretraversalFor: anObject)
                ifTrue: [ 
                  " if the path has too many set-valued terms or we''re using GsPathTerms, go ahead and update the indexes ... potential for too much or incorrect MappingInfo."
                  rootObjects
                    ifNil: [ num timesRepeat: [ pathTerm addMappingsForObject: anObject logging: doLogging ] ]
                    ifNotNil: [ 
                      rootObjects
                        do: [ :root | pathTerm addMappingsForObject: anObject root: root logging: doLogging ] ] ]
                ifFalse: [ 
                  " get all the mapping info first (this detects any errors
                      along the path before any changes are made to the indexes) "
                  mapInfo := pathTerm
                    getMappingInfoFor: anObject
                    ifObject: nil
                    atOffset: 0
                    replaceWith: nil.	" if the result is not a map info object, it is an Array
                      used for error information "
                  mapInfo class == Array
                    ifTrue: [ 
                      i > 1
                        ifTrue: [ 
                          " indexing objects have been modified, prevent commits "
                          (mapInfo at: 2) signal ].
                      ^ mapInfo ].	" now update dependency lists, index dictionary, B-trees "
                  num
                    timesRepeat: [ mapInfo pathTerm addMappingsUsing: mapInfo logging: doLogging ] ] ] ].
      i := i + 1 ].
  ^ true
 ' dictionaries: GsSession currentSession symbolList
category: 'GsIndexes'
environmentId: 0.
%

run
 (SqueakEnvironment at: #UnorderedCollection) compileMethod: '
_findIndexesWithPath: pathArray
  "Returns an Array of index objects whose path components are the same as
 represented by the path string.  This method only considers those indexes that
 are defined with the receiver as the root NSC."

  | anArray iList |
  iList := self _indexedPaths.
  iList == nil
    ifTrue: [ ^ {} ].
  anArray := {}.	" for each index on the NSC ... "
  1 to: iList size by: 2 do: [ :i | 
    " only look at the index if the receiver is the root "
    (iList at: i + 1) == 1
      ifTrue: [ 
        " if the index is on the same path, add it to the Array "
        ((iList at: i) hasIndexOnPath: pathArray)
          ifTrue: [ anArray addLast: (iList at: i) ] ] ].
  ^ anArray
 ' dictionaries: GsSession currentSession symbolList
category: 'GsIndexes'
environmentId: 0.
%

run
 (SqueakEnvironment at: #UnorderedCollection) compileMethod: '
_getIndexList
  "Returns the index list for the receiver.  If one does not exist, create it."

  | iList |
  iList := self _indexedPaths.
  iList == nil
    ifTrue: [ 
      iList := IndexList new.
      self _indexedPaths: iList.	"deleted moveToDisk"
      iList objectSecurityPolicy: GsIndexingObjectSecurityPolicy ].
  ^ iList
 ' dictionaries: GsSession currentSession symbolList
category: 'GsIndexes'
environmentId: 0.
%

run
(SqueakEnvironment at: #UnorderedCollection) compileMethod: '
_hasIncompleteIndexes
  "Returns whether the receiver has any incomplete indexes on it.
 If the receiver has incomplete indexes use IndexManager>>removeAllIncompleteIndexesOn:
 to remove the incomplete indexes."

  | iList |
  iList := self _indexedPaths.
  iList == nil
    ifTrue: [ ^ false ].
  1 to: iList size by: 2 do: [ :i | 
    " if it is an incomplete root index ... "
    ((iList at: i + 1) == 1 and: [ (iList at: i) isComplete not ])
      ifTrue: [ ^ true ] ].
  ^ false
   ' dictionaries: GsSession currentSession symbolList
category: 'GsIndexes'
environmentId: 0.
%

run
(SqueakEnvironment at: #UnorderedCollection) compileMethod: '
_indexedPaths
  "Private.  For use only by the indexing subsystem.

 Returns the indexed paths for the receiver."

  ^ _indexedPaths
   ' dictionaries: GsSession currentSession symbolList
category: 'GsIndexes'
environmentId: 0.
%

run
(SqueakEnvironment at: #UnorderedCollection) compileMethod: '
_indexedPaths: anIndexListOrNil
  "used along with SimpleDomainTest to be able to efficiently switch between indexed and non-indexed queries"

  _indexedPaths := anIndexListOrNil
   ' dictionaries: GsSession currentSession symbolList
category: 'GsIndexes'
environmentId: 0.
%

run
(SqueakEnvironment at: #UnorderedCollection) compileMethod: '
_putInWriteSet
  "In some cases, it is necessary to put an NSC with indexes into the write set
 explicitly.  For example, when NO_RW_CHECKS concurrency mode is enabled, index
 creation should put the NSC in the write set to ensure that other transactions
 do not commit additions to the NSC successfully (and thus corrupting the
 internal indexing objects).  This method puts the receiver in the write set by
 writing the _indexedPaths."

  self _indexedPaths: self _indexedPaths
   ' dictionaries: GsSession currentSession symbolList
category: 'GsIndexes'
environmentId: 0.
%

run
(SqueakEnvironment at: #UnorderedCollection) compileMethod: '
_updateIndexesForAdditionOf: anObject logging: aBoolean
  "anObject is being added to the receiver.  Update any indexes if necessary.
 Returns true if the index objects were modified correctly; otherwise returns
 an Array containing error information."

  <primitive: 2001>
  | doLogging iList hasIndex prot |
  prot := System _protectedMode.
  [ 
  iList := self _indexedPaths.
  hasIndex := false.
  1 to: iList size by: 2 do: [ :j | 
    " first handle modification tracking "
    (iList at: j + 1) > 0
      ifTrue: [ hasIndex := true ]
      ifFalse: [ 
        (iList at: j + 1) == 0
          ifTrue: [ (iList at: j) adding: anObject to: self ] ] ].
  hasIndex
    ifFalse: [ ^ true ].
  System _bypassReadAuth.
  doLogging := iList isCommitted
    and: [ UnorderedCollection _isRcIndexLoggingEnabled ].	" if the indexes are not committed, do not need to log "
  [ ^ self _doUpdateIndexesForAdditionOf: anObject iList: iList logging: aBoolean ]
    onSynchronous: Error
    do: [ :ex | 
      " returns Array containing err info "
      ^ {true.	" indicating indexing objects may have been modified "
      ex} ] ]
    ensure: [ 
      System _exitBypassReadAuth.
      prot _leaveProtectedMode ].
  ^ true
   ' dictionaries: GsSession currentSession symbolList
category: 'GsIndexes'
environmentId: 0.
%

run
(SqueakEnvironment at: #UnorderedCollection) compileMethod: '
add: anElement
  ^ self @env7: add: anElement
   ' dictionaries: GsSession currentSession symbolList
category: 'GsIndexes'
environmentId: 0.
%

run
(SqueakEnvironment at: #UnorderedCollection) class compileMethod: '
_canCreateQueryOnInstances
  "GsQuery may be created on most subclasses of Collection. Answer false if a GsQuery is not appropriate
   for the receiver."

  ^ true
   ' dictionaries: GsSession currentSession symbolList
category: 'GsIndexes'
environmentId: 0.
%

run
(SqueakEnvironment at: #UnorderedCollection) class compileMethod: '
new
  ^ self @env7: new.
   ' dictionaries: GsSession currentSession symbolList
category: 'GsIndexes'
environmentId: 0.
%

run
(SqueakEnvironment at: #UnorderedCollection) compileMethod: '
removeIncompleteIndex
  "If there is an incomplete index, clean it up. In general this method should not be used, a better way to remove
 incomplete indexes is to use IndexManager>>removeAllIncompleteIndexesOn:"

  [ 
  System _zeroArgPrim: 51.	"_enteringIncompleteIndexRemoval"
  [ 
  | systm indexObj |
  systm := System.
  systm abortTransaction.
  indexObj := self _findIncompleteIndex.
  indexObj ifNil: [ ^ self ].
  self
    _undoIndexCreation: indexObj
    pathTerm: indexObj _findFirstUnsharedPathTerm.
  systm _commitPrintingDiagnostics ]
    untilTrue ]
    ensure: [ System _zeroArgPrim: 52	"_leavingIncompleteIndexRemoval" ]
       ' dictionaries: GsSession currentSession symbolList
category: 'GsIndexes'
environmentId: 0.
%

run
(SqueakEnvironment at: #UnorderedCollection) compileMethod: '
_findIncompleteIndex
  "Returns an index that is incomplete, or nil if not found."

  | iList |
  iList := self _indexedPaths.
  iList == nil
    ifTrue: [ ^ nil ].	" for each index on the NSC ... "
  1 to: iList size by: 2 do: [ :i | 
    " only look at the index if the receiver is the root "
    (iList at: i + 1) == 1
      ifTrue: [ 
        " see if the index is complete "
        (iList at: i) isComplete
          ifFalse: [ ^ iList at: i ] ] ].
  ^ nil
       ' dictionaries: GsSession currentSession symbolList
category: 'GsIndexes'
environmentId: 0.
%

run
(SqueakEnvironment at: #UnorderedCollection) compileMethod: '
_lockForIndexCreation
  "Locks the receiver to prevent concurrent users from invalidating index
 creation."

  | lockList |
  lockList := {self}.
  self _indexDictionary
    ifNotNil: [ self _indexDictionary _doCollisionBuckets: [ :cb | lockList add: cb ] ].
  System
    writeLockAll: lockList;
    addAllToCommitOrAbortReleaseLocksSet: lockList
       ' dictionaries: GsSession currentSession symbolList
category: 'GsIndexes'
environmentId: 0.
%

run
(SqueakEnvironment at: #UnorderedCollection) compileMethod: '
_indexDictionary
  "Returns the index dictionary that is shared by all indexes.  If there are no
 indexes, returns nil."

  | iList |
  iList := self _indexedPaths.
  iList
    ifNil: [ ^ nil ]
    ifNotNil: [ 
      1 to: iList size by: 2 do: [ :i | 
        ((iList at: i + 1) == 1 and: [ (iList at: i) indexDictionary ~~ nil ])
          ifTrue: [ ^ (iList at: i) indexDictionary ] ].
      ^ nil ]
       ' dictionaries: GsSession currentSession symbolList
category: 'GsIndexes'
environmentId: 0.
%

commit
logout
